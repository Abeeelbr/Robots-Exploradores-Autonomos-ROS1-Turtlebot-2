<launch>
    <!-- Argumentos configurables -->
    <arg name="gui" default="true"/>
    <arg name="base" value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
    <arg name="battery" value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
    <arg name="stacks" value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
    <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->
    <param name="use_sim_time" value="false"/>


    <!-- Cargar los parámetros de configuración -->
    <rosparam command="load" file="$(find squad_main)/config/configGeneral.yaml"/>
    <rosparam file="$(find squad_exploracion)/config/config.yaml" command="load"/>
    <rosparam file="$(find squad_navegacion)/config/gmapping_params.yaml" command="load" />

    <!-- Sobrescribir el valor del parámetro MODO_EJECUCION a REAL -->
    <param name="MODO_EJECUCION" value="GAZEBO"/>


    <!-- Incluir el archivo que sube el robot_description -->
    <!-- <include file="$(find squad_main)/launch/includes/upload_robot_description.launch.xml">
        <arg name="base" value="$(arg base)"/>
        <arg name="stacks" value="$(arg stacks)"/>
        <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
    </include> -->

      <!-- Publicador de estado del robot -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="30.0" />
    </node>

    <!-- Prueba 1 -->
    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" output="screen"/>
    <!-- Prueba 2 -->
    <!-- <node pkg="kobuki_node" type="kobuki_node" name="kobuki_node" output="screen"/> -->

    <!-- Lanzar el nodo de gestión de estados -->
    <node pkg="squad_main" type="squad_state_manager.py" name="squad_state_manager" output="screen"></node>

    <!-- Lanzar el nodo de la interfaz -->
    <node pkg="squad_main" type="squad_interfaz.py" name="interfaz" output="screen"/>

    <!-- Incluir el archivo de lanzamiento del paquete de exploración -->
    <include file="$(find squad_exploracion)/launch/exploracion.launch"/>  

    <!-- Incluir el archivo de lanzamiento del paquete de planificacion -->
    <node pkg="squad_planificacion" type="squad_station_manager_node.py" name="squad_planificacion" output="screen"></node>

    <!-- Incluir el archivo de lanzamiento del paquete de navegación con argumento '3d_sensor' -->
    <include file="$(find squad_navegacion)/launch/squad_navegacion_real.launch">
        <arg name="3d_sensor" value="$(arg 3d_sensor)" />
    </include>

    <!-- Lanzar RViz (fuera del group para asegurar que se ejecute) -->
    <include file="$(find turtlebot_rviz_launchers)/launch/view_navigation.launch"/>

    <!-- <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" 
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
    </node> -->


</launch>
